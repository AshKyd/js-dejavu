#!/usr/bin/env node

/*jshint node:true, regexp:false*/

'use strict';

var fs = require('fs'),
    program  = require('commander'),
    inFile,
    outFile;

////////////////////////////////////////////////////

program
    .version('0.0.1')
    .parse(process.argv);

inFile = program.args[0];
outFile = program.args[1];

////////////////////////////////////////////////////

var len = fs.fstatSync(process.stdin.fd).size,
    contents = len > 0 ? fs.readSync(process.stdin.fd, len)[0] : '',
    nrIndent,
    indentChar,
    indent;

////////////////////////////////////////////////////

// Guess the indentation used
function guessIndentation(str) {
    var matches,
        x;

    if ((matches = str.match(/\{[^\n]*\n*((:? |\t)+)(:?\w|\/)/))) {
        indentChar = matches[1].charAt(0);
        nrIndent = matches[1].length;
    } else {
        console.warn('Could not guess indentation, assuming 4 spaces.');
        nrIndent = '4';
        indentChar = ' ';
    }

    indent = '';

    for (x = nrIndent - 1; x >= 0; x -= 1) {
        indent += indentChar;
    }
}

// Returns the string with the first { ... }, brackets included
function embraced(str, pos) {
    var len = str.length,
        x,
        braces = 0,
        initialPos = pos || 0,
        currentChar;

    for (x = pos; x < len; x += 1) {
        currentChar = str.charAt(x);
        if (currentChar === '{') {
            braces += 1;
        } else if (currentChar === '}') {
            braces -= 1;
            if (!braces) {
                return str.substring(initialPos, x + 1);
            } else if (braces < 0) {
                break;
            }
        }
    }

    return null;
}

// Optimizes a given object in the string form
function optimize(objStr, directive, parent) {

    // If the file is set to be ignored
    if (/\s*\$optimizer:\s*ignore/.test(objStr)) {
        process.stdout.write(parent + '.create(' + objStr);
        return;
    }

    var len,
        x = 0,
        name = '',
        value,
        currentChar,
        isStatic = false,
        inner,
        staticEndPos,
        matches,
        currentNrIndent,
        buffer = '',
        efficient = true,
        extendsSomething = false;

    if (directive === 'extend') {
        // Try to guess if this is an interface or not
        if (!/function\s*\([^\(]*\)\s*\{\s*(["']use strict["'];)?.*\w.*\s*\}$/m.test(objStr)) {
            process.stdout.write(parent + '.extend(' + objStr);
            return;
        }

        extendsSomething = true;
        buffer += parent + '.extend(function ($super, $self, $parent) {';
    } else if ((matches = objStr.match(/\$extends\s*:\s*(\w+)\s*(\}?),/m))) {
        extendsSomething = true;
        buffer += parent + '.create(' + matches[1] + ', function ($super, $self, $parent) {';

        // If a } is not next to an $extends, remove the empty lines also after
        if (!matches[2]) {
            objStr = objStr.replace(/\$extends\s*:\s*(\w+),?\s*/, '');
        // Otherwise just leave it blank
        } else {
            objStr = objStr.replace(/( |\t)*\$extends\s*:\s*(\w+),?/, '');
            objStr = objStr.replace(/,(\s*)\}/, '$1}');     // Be sure to also clean up trailing commas
        }

        // Trim empty objects
        objStr = objStr.replace(/\{\s+\}/g, '{}');
    } else {
        // If is an interface, we do not need to optimize
        if (parent === 'Interface') {
            process.stdout.write(parent + '.create(' + objStr);
            return;
        }

        buffer += parent + '.create(function ($self) {';
    }

    // Calculate alignment
    matches = objStr.match(/^\{[^\n]*(\n+)((:? |\t)+)/m);
    currentNrIndent = matches ? matches[2].length : 0;

    if (matches) {
        if (matches[2].charAt(0) !== indentChar) {
            throw new Error('Different indent found at:\n\n' + objStr.substr(100));
        }

        currentNrIndent = matches[2].length;

        buffer += matches[1] + matches[2];
        objStr = objStr.replace(new RegExp(matches[2], 'g'), matches[2] + indent);
    } else {
        currentNrIndent = 0;
        buffer += ' ';
    }

    buffer += 'return ';

    // Process object
    len = objStr.length - 1;

    function superStaticReplacer() {
        efficient = false;
        return '$parent';
    }

    function selfReplacer() {
        efficient = false;
        return '$self';
    }

    for (x = 0; x < len; x += 1) {
        currentChar = objStr.charAt(x);

        // Check if the end of static was reached
        if (x === staticEndPos) {
            isStatic = false;
        }

        buffer += currentChar;

        if (currentChar === ':') {
            value = embraced(objStr, x + 1);
            if (value && /^\s*function\s*/.test(value)) {
                x += value.length;

                // Super replacement
                value = value.replace(/(this|that)(?:\.|(?:[\'])?)\$super(?:'\])?\(/g, '$super.' + name + '.call($1, ')
                             .replace(/(this|that), \)/g, '$1)');

                // If in static context, $super is actually $parent
                if (isStatic) {
                    value = value.replace(/\$super/g, superStaticReplacer);
                }

                // Self replacement
                value = value.replace(/(this|that)(?:\.|(?:[\'])?)\$self(?:'\])?/g, selfReplacer);

                buffer += value;
            }
        } else {
            // Save the current property name
            if (/[a-zA-Z0-9_$]/.test(currentChar)) {
                name += currentChar;
            } else {
                // If the property name is $statics, hold a flag telling we are at a $static context
                if (name === '$statics') {
                    inner = embraced(objStr, x);
                    if (inner) {
                        name = '$statics';
                        isStatic = true;
                        staticEndPos = x + inner.length;
                    }
                }

                if (name) {
                    name = '';
                }
            }
        }
    }

    // Finalize
    if (currentNrIndent) {
        buffer += (objStr === '{}' ? '' : indent) + '};\n';

        for (x = 0; x < currentNrIndent - nrIndent; x += 1) {
            buffer += indentChar;
        }
    } else {
        buffer += '}; ';
    }

    buffer += '}';

    // Final optimization
    if (efficient) {
        if (extendsSomething) {
            buffer = buffer.replace('function ($super, $self, $parent) {', 'function ($super) {');
        } else {
            buffer = buffer.replace('function ($self) {', 'function () {');
        }
    }

    process.stdout.write(buffer);
}

// Find all usages within the contents of the file
function parse(contents) {
    var pos = 0,
        tmp = pos,
        objStr,
        matches,
        regExp = /(\w+)\.(create|extend)\(\{/g;

    // While find usage matches..
    while ((matches = regExp.exec(contents))) {
        pos = matches.index;

        // Add the string before the match
        process.stdout.write(contents.substring(tmp, pos));

        pos += matches[0].length - 1;

        // Optimize the object after it
        objStr = embraced(contents, pos);
        optimize(objStr, matches[2], matches[1]);

        tmp = pos + objStr.length;

        regExp.lastIndex = tmp;
    }

    //  Add the rest
    process.stdout.write(contents.substr(tmp ? tmp : 0));
}

////////////////////////////////////////////////////

// Guess file indentation
guessIndentation(contents);

parse(contents);

#!/usr/bin/env node

/*jshint node:true, regexp:false*/

'use strict';

var fs = require('fs'),
    program = require('commander'),
    esprima = require('esprima'),
    escodegen = require('escodegen'),
    Syntax = esprima.Syntax;

////////////////////////////////////////////////////

program
    .version('0.0.1')
    .option('-r, --remove-strict', 'Remove "use strict" code.')
    .parse(process.argv);

////////////////////////////////////////////////////

var parser = {

    /**
     *
     */
    forEachUsage: function (ast, callback) {
        var queue = [ast],
            curr,
            objectName,
            x,
            keys;

        while (queue.length) {
            curr = queue.pop();

            if (curr) {
                if (curr.type === Syntax.CallExpression &&
                    curr.callee.type === Syntax.MemberExpression &&
                    curr.callee.object.type === Syntax.Identifier &&
                    curr.callee.property.type === Syntax.Identifier) {

                    objectName = curr.callee.object.name;

                    // Obvious usage
                    if (curr.callee.property.name === 'declare') {
                        if (objectName === 'Interface') {
                            callback({ type: 'interface', ast: curr });
                            continue;
                        }
                        if (objectName === 'AbstractClass') {
                            callback({ type: 'abstract', ast: curr });
                            continue;
                        }
                        if (objectName === 'Class' || objectName === 'FinalClass') {
                            callback({ type: 'concrete', ast: curr });
                            continue;
                        }
                    }

                    // Usage with extend
                    if (curr.callee.property.name === 'extend') {
                        if (parser._isInterface(curr['arguments'])) {
                            callback({ type: 'interface', ast: curr });
                            continue;
                        } else if (parser._isAbstractClass(curr['arguments'])) {
                            callback({ type: 'abstract', ast: curr });
                            continue;
                        } else if (parser._isClass(curr['arguments'])) {
                            callback({ type: 'concrete', ast: curr });
                            continue;
                        }
                    }
                }

                if (Object.prototype.toString.call(curr) === '[object Array]') {
                    for (x = curr.length - 1; x >= 0; x -= 1) {
                        queue.push(curr[x]);
                    }
                } else if (curr.type) {
                    keys = Object.keys(curr);

                    for (x = keys.length - 1; x >= 0; x -= 1) {
                        queue.push(curr[keys[x]]);
                    }
                }
            }
        }
    },

    /**
     *
     */
    optimizeAbstactClass: function (ast) {
        // Step 1
        // Remove abstracts
    },

    /**
     *
     */
    optimizeInterface: function (ast) {
        // Step 1
        // Remove all the functions
    },

    /**
     *
     */
    optimizeClass: function (ast) {
        var args = ast['arguments'],
            type = ast.callee.property.name,
            extend,
            funcExpression;

        // Step 1
        // Convert the object to a return function with the magical $ params
        funcExpression = {
            type: Syntax.FunctionExpression,
            id: null,
            params: [],
            body: {
                type: Syntax.BlockStatement,
                body: [
                    {
                        type: Syntax.ReturnStatement
                        // Return object will be here as the argument key
                    }
                ]
            }
        };

        if (type === 'extend' || (extend = parser._getExtends(args[0]))) {
            funcExpression.params.push(
                {
                    type: Syntax.Identifier,
                    name: '$super'
                },
                {
                    type: Syntax.Identifier,
                    name: '$self'
                },
                {
                    type: Syntax.Identifier,
                    name: '$parent'
                }
            );

            if (type !== 'extend') {
                parser._removeExtends(args[0]);
                ast['arguments'] = [
                    {
                        type: 'Identifier',
                        name: extend
                    },
                    funcExpression
                ];
            } else {
                ast['arguments'] = [funcExpression];
            }
        } else {
            funcExpression.params.push(
                {
                    type: Syntax.Identifier,
                    name: '$self'
                }
            );
            ast['arguments'] = [funcExpression];
        }

        funcExpression.body.body[0].argument = args[0];

        // Step 2
        // Replace all the this.$super / this.$static / this.$self accordingly
        // Be aware that depending on the context (normal or static, things must be adapted)
        parser._findAndParseFunctions(args[0].properties);
    },

    /**
     *
     */
    optimize: function (ast) {
        var identifier = ast.callee.object.name,
            method = ast.callee.property.name;

        // Detect and make the optimizations according to the type
        if (identifier === 'Class' || identifier === 'FinalClass') {
            parser.optimizeClass(ast);
        } else if (identifier === 'AbstractClass') {
            parser.optimizeClass(ast);
            parser.optimizeAbstactClass(ast);
        } else if (identifier === 'Interface') {
            parser.optimizeInterface(ast);
        }
    },

    _isClass: function (ast) {
        // Check if it has a $name, $statics, $finals, $abstracts or $constants
    },

    _isAbstractClass: function (ast) {
        // Check if it has an $abstracts
    },

    _isInterface: function (asts) {
        var x,
            curr;

        for (x = asts.length - 1; x >= 0; x -= 1) {
            curr = asts[x];

            if (curr.type !== Syntax.Property) {
                continue;
            }

            if (curr.key.name === '$statics') {
                if (!this._isInterface(curr.value)) {
                    return false;
                }
            } else if (curr.type === Syntax.FunctionExpression) {
                // Ensure that functions are empty
            }
        }
    },

    /**
     *
     */
    _findAndParseFunctions: function (asts, isStatic) {
        var x,
            curr,
            currFuncName,
            efficient = true,
            ret;

        for (x = asts.length - 1; x >= 0; x -= 1) {
            curr = asts[x];

            if (curr.type !== Syntax.Property) {
                continue;
            }

            if (curr.key.name === '$statics') {
                parser._findAndParseFunctions(curr.value, true);
            } else if (curr.key.name === '$finals') {
                parser._findAndParseFunctions(curr.value);
            } else if (curr.value.type === Syntax.FunctionExpression) {
                currFuncName = curr.key.name;
                ret = parser._replaceSpecial(currFuncName, curr, isStatic);
                if (!ret) {
                    efficient = false;
                }
            }
        }

        return efficient;
    },

    /**
     *
     */
    _replaceSpecial: function (funcName, ast, isStatic) {
        var code = escodegen.generate(ast.value),
            efficient = true;

        function superStaticReplacer() {
            efficient = false;
            return '$parent';
        }

        function selfReplacer() {
            efficient = false;
            return '$self';
        }

        // Super replacement
        code = code.replace(/(this|that)(?:\.|(?:[\'])?)\$super(?:'\])?\(/g, '$super.' + funcName + '.call($1, ')
                   .replace(/(this|that), \)/g, '$1)');

        // If on static replace, $super is actually $parent
        if (isStatic) {
            code = code.replace(/\$super/g, superStaticReplacer);
        }

        // Self replacement
        code = code.replace(/(this|that)(?:\.|(?:[\'])?)\$self(?:'\])?/g, selfReplacer);

        code = code.replace(/function\s*\(/, 'function x(');
        ast.value = esprima.parse(code).body[0];
        ast.value.id = null;
        ast.value.type = Syntax.FunctionExpression;

        return efficient;
    },

    /**
     *
     */
    _getExtends: function (ast) {
        var x,
            length = ast.properties.length;

        for (x = 0; x < length; x += 1) {
            if (ast.properties[x].key.name === '$extends') {
                return ast.properties[x].value.name;
            }
        }
    },

    /**
     *
     */
    _removeExtends: function (ast) {
        var x,
            length = ast.properties.length;

        for (x = 0; x < length; x += 1) {
            if (ast.properties[x].key.name === '$extends') {
                ast.properties.splice(x, 1);
                break;
            }
        }
    }

};

var len = fs.fstatSync(process.stdin.fd).size,
    contents = len > 0 ? fs.readSync(process.stdin.fd, len)[0] : '',
    ast,
    output;

// Read and get an ast
ast = esprima.parse(contents);

parser.forEachUsage(ast, function (usageAst) {
    parser.optimize(usageAst);
});

// Generate the source
output = escodegen.generate(ast);

// Output the file
process.stdout.write(output);

//process.stdout.write(JSON.stringify(ast, null, '    '));